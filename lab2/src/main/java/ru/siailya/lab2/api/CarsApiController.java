/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.siailya.lab2.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import ru.siailya.lab2.model.Car;
import ru.siailya.lab2.model.NewCar;
import ru.siailya.lab2.service.CarService;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-16T16:06:53.232937100+03:00[Europe/Moscow]", comments = "Generator version: 7.13.0")
@Validated
@RestController("/api/cars")
@Tag(name = "Default", description = "the Default API")
public class CarsApiController {

    private final CarService service;

    public CarsApiController(CarService service) {
        this.service = service;
    }

    /**
     * POST /api/cars : Создать новый автомобиль
     *
     * @param newCar (required)
     * @return Автомобиль создан (status code 201)
     * or Неверные входные данные (status code 400)
     */
    @Operation(
            operationId = "createCar",
            summary = "Создать новый автомобиль",
            responses = {
                    @ApiResponse(responseCode = "201", description = "Автомобиль создан", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Car.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Неверные входные данные")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/api/cars",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    ResponseEntity<Car> createCar(
            @Parameter(name = "NewCar", description = "", required = true) @Valid @RequestBody NewCar newCar
    ) {
        return ResponseEntity.ok(service.create(newCar));
    }


    /**
     * DELETE /api/cars/{id} : Удалить автомобиль по ID
     *
     * @param id (required)
     * @return Успешно удалено (status code 204)
     * or Не найдено (status code 404)
     */
    @Operation(
            operationId = "deleteCar",
            summary = "Удалить автомобиль по ID",
            responses = {
                    @ApiResponse(responseCode = "204", description = "Успешно удалено"),
                    @ApiResponse(responseCode = "404", description = "Не найдено")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/api/cars/{id}"
    )
    ResponseEntity<Void> deleteCar(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        service.delete(id);
        return ResponseEntity.noContent().build();
    }


    /**
     * GET /api/cars/{id} : Получить автомобиль по ID
     *
     * @param id (required)
     * @return Детали автомобиля (status code 200)
     * or Не найдено (status code 404)
     */
    @Operation(
            operationId = "getCarById",
            summary = "Получить автомобиль по ID",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Детали автомобиля", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Car.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Не найдено")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/cars/{id}",
            produces = {"application/json"}
    )
    ResponseEntity<Optional<Car>> getCarById(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        Optional<Car> car = service.findById(id);

        if (car.isPresent()) {
            return ResponseEntity.ok(car);
        }

        return ResponseEntity.notFound().build();
    }


    /**
     * GET /api/cars : Получить список автомобилей
     *
     * @return Массив автомобилей (status code 200)
     */
    @Operation(
            operationId = "listCars",
            summary = "Получить список автомобилей",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Массив автомобилей", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Car.class)))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/cars",
            produces = {"application/json"}
    )
    ResponseEntity<List<Car>> listCars() {
        return ResponseEntity.ok(service.findAll());
    }

}
